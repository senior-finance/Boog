import axios from 'axios';
import { MONGODB_BACKEND_URL } from '@env';

const API_BASE = MONGODB_BACKEND_URL;

// Í≥µÌÜµ MongoDB API Ìò∏Ï∂ú Ìó¨Ìçº Ìï®Ïàò
export async function mongoDB(action, dbName, collName, params) {
  try {
    console.log('üì° ÏöîÏ≤≠ Î≥¥ÎÉÑ:', action, dbName, collName, params);
    const res = await axios.post(
      `${API_BASE}api/${action}`,
      { dbName, collName, params },
      { headers: { 'Content-Type': 'application/json' } }
    );
    const { success, result, error } = res.data;
    if (!success) throw new Error(error);
    return result;
  } catch (err) {
    console.error(`[‚ùå mongoDB:${action}] Ïò§Î•ò`, err?.response?.data || err.message);
    throw err;
  }
}

// === ÏûÖÍ∏à Ï†ÑÏö© deposit Ìï®Ïàò (Î°úÍ∑∏ÎÇ®Í∏∞ + ÏûîÏï° Ï∞®Í∞ê) ===
export async function deposit(dbName, accountId, accountBank, amount) {
  const logId = await mongoDB(
    'insertOne',
    'bank',
    'deposit',
    { document: { dbName, accountId, accountBank, amount, createdAt: new Date() } }
  );
  try {
    await mongoDB(
      'updateOne',
      dbName,
      'account',
      {
        filter: { accountId },
        update: { $inc: { amount: +amount } }
      }
    );
  } catch (err) {
    console.error('‚ñ∂ updateOne failed:', err?.response?.status, err?.response?.data);
  }
  return logId;
}

// === Ï∂úÍ∏à Ï†ÑÏö© withdraw Ìï®Ïàò (Î°úÍ∑∏ÎÇ®Í∏∞ + ÏûîÏï° Ï∞®Í∞ê) ===
export async function withdraw(dbName, accountId, accountBank, amount) {
  const logId = await mongoDB(
    'insertOne',
    'bank',
    'withdraw',
    { document: { dbName, accountId, accountBank, amount, createdAt: new Date() } }
  );
  try {
    await mongoDB(
      'updateOne',
      dbName,
      'account',
      {
        filter: { accountId },
        update: { $inc: { amount: -amount } }
      }
    );
  } catch (err) {
    console.error('‚ñ∂ updateOne failed:', err?.response?.status, err?.response?.data);
  }
  return logId;
}

// === Í≥ÑÏ¢å Ï†ïÎ≥¥ Upsert ===
export async function accountUpsert(userName, accountId, accountBank, amount) {
  const accountNum = accountId.slice(-10);
  const result = await mongoDB(
    'updateOne',
    `${userName}`,
    'account',
    {
      filter: { accountId },
      update: {
        $set: { accountNum, userName, accountBank, amount },
        $setOnInsert: { createdAt: new Date() }
      },
      options: { upsert: true }
    }
  );
  return result.upsertedId || null;
}

// === Í≥ÑÏ¢å Ï†ïÎ≥¥ Ï°∞Ìöå ===
export async function accountGet(userName, accountId) {
  try {
    const res = await mongoDB(
      'find',
      userName,
      'account',
      { query: { accountId } }
    );

    let docs = [];
    if (Array.isArray(res)) {
      docs = res;
    } else if (Array.isArray(res.documents)) {
      docs = res.documents;
    }

    const doc = docs[0];
    if (!doc) return null;

    const { accountNum, amount, accountBank } = doc;
    return { accountNum, amount, accountBank };
  } catch (err) {
    console.error('accountGet Ïã§Ìå®:', err);
    return null;
  }
}

// === Ï†ÑÏ≤¥ Ï∂úÍ∏à Í∏∞Î°ù Ï°∞Ìöå ===
export async function accountGetAll(userName) {
  return await mongoDB('find', 'bank', 'withdraw', { query: {} });
}

// === ÏïåÎ¶º Ï†ÄÏû• ===
export async function addNotification(userId, icon, iconColor, borderColor, content) {
  return await mongoDB('insertOne', 'info', 'notify', {
    document: {
      userId,
      icon,
      iconColor,
      borderColor,
      content,
      createdAt: new Date(),
    },
  });
}

// === ÏïåÎ¶º Ï°∞Ìöå ===
export async function getNotifications(userId) {
  const res = await mongoDB('find', 'info', 'notify', {
    query: { userId },
    options: { sort: { createdAt: -1 } },
  });

  if (Array.isArray(res)) return res;
  if (Array.isArray(res.documents)) return res.documents;
  return [];
}
